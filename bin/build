#!/usr/bin/env php
<?php

use Brick\VarExporter\VarExporter;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\ConsoleOutputInterface;
use Symfony\Component\Console\Output\StreamOutput;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\HttpClient\HttpClient;

require_once __DIR__ . '/../vendor/autoload.php';

if (!class_exists(SingleCommandApplication::class)) {
    echo 'This utility requires symfony/console >= 5.1.0';
    exit(1);
}

(new SingleCommandApplication)
    ->setDescription('Build package resource files')
    ->setCode(new class {
        protected $http;

        public function __construct()
        {
            $this->http = HttpClient::createForBaseUri('https://chromium-i18n.appspot.com');
        }

        public function __invoke(InputInterface $input, ConsoleOutputInterface $output): void
        {
            $output->writeln('Downloading...');

            $countryData = [];
            $isoIds = $this->getCountryList();
            $progress = new ProgressBar($output, count($isoIds));

            foreach ($isoIds as $isoId) {
                $response = $this->getCountry($isoId);

                $countryData[$response['key']] = array_filter([
                    $response['zip'] ?? null,
                    $response['zipex'][0] ?? null,
                ]);

                $progress->advance();
            }

            $progress->finish();
            $output->write(PHP_EOL);

            $output->writeln('Writing...');
            $this->writeFile(__DIR__ . '/../resources/countries.php', $countryData);

            $output->writeln('Resource files updated successfully.');
        }

        protected function getCountry(string $isoId): array
        {
            $response = $this->http->request('GET', "/ssl-address/data/{$isoId}")->toArray();
            $response['zipex'] = isset($response['zipex']) ? explode(',', $response['zipex']) : [];

            return $response;
        }

        protected function getCountryList(): array
        {
            $response = $this->http->request('GET', '/ssl-address/data');

            return explode('~', $response->toArray()['countries']);
        }

        protected function writeFile(string $path, array $data): void
        {
            $data = VarExporter::export($data, VarExporter::ADD_RETURN | VarExporter::INLINE_NUMERIC_SCALAR_ARRAY);
            $file = new StreamOutput(fopen($path, 'w'));

            $file->writeln(<<<EOT
<?php

/*
|--------------------------------------------------------------------------
| Laravel Postal Codes Validation
|--------------------------------------------------------------------------
|
| This resource file is generated from Google's open-source address
| metadata API. For more information on the API refer to its public
| repository at https://github.com/google/libaddressinput
|
| Please do not edit this file directly, pull requests containing changes
| to this file will not be accepted!
|
*/

EOT
            );
            $file->write(stripslashes($data));
        }
    })
    ->run();
